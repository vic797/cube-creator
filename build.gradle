plugins {
    id 'groovy'
}

group 'io.github.cubecreator'
version '0.1'

repositories {
    mavenCentral()
}

groovydoc {
    includes = [ "**/plugin/**", "**/ui/dialog/BaseDialog.groovy", "**/ui/dialog/BaseDialog.groovy", "**/ui/editor/AbstractEditor.groovy", "**/util/Settings.groovy" ]
    //includes = [ "**/plugin/**" ]
    excludes = [ "**/plugin/PluginManager.groovy" ]
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.fifesoft:rsyntaxtextarea:3.1.2'
    implementation 'com.fifesoft:rstaui:3.1.1'
    implementation 'com.formdev:flatlaf:1.1.1'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'org.commonmark:commonmark:0.17.1'
    implementation 'org.commonmark:commonmark-ext-gfm-tables:0.17.1'
    implementation 'org.commonmark:commonmark-ext-gfm-strikethrough:0.17.1'
    implementation 'org.commonmark:commonmark-ext-ins:0.17.1'
    implementation 'org.commonmark:commonmark-ext-task-list-items:0.17.1'
    implementation 'org.slf4j:slf4j-nop:1.7.30'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'net.lingala.zip4j:zip4j:2.7.0'
}

jar {
    archiveFileName = 'cube-creator.jar'
    manifest {
        attributes 'Main-Class': 'io.github.cubecreator.Launcher'
    }
}

test {
    useJUnitPlatform()
}

task copyDependencies(type: Copy, dependsOn: [jar]) {
    from configurations.runtimeClasspath
    into "$buildDir/libs"
}

task cleanupJar(type: Delete) {
    delete "$projectDir/dist/linux_x64/data"
    delete "$projectDir/dist/linux_x64/libs"
    delete "$projectDir/dist/linux_x64/plugins"
    delete "$projectDir/dist/mac_x64/data"
    delete "$projectDir/dist/mac_x64/libs"
    delete "$projectDir/dist/mac_x64/plugins"
    delete "$projectDir/dist/windows_x86/data"
    delete "$projectDir/dist/windows_x86/libs"
    delete "$projectDir/dist/windows_x86/plugins"
    delete "$projectDir/dist/windows_x64/data"
    delete "$projectDir/dist/windows_x64/libs"
    delete "$projectDir/dist/windows_x64/plugins"
}

task buildJar(dependsOn: [copyDependencies]) {
    print("Copying files")
    copy {
        from(buildDir) {
            include 'libs/**'
        }
        into "$projectDir/dist/linux_x64"
    }
    copy {
        from(buildDir) {
            include 'libs/**'
        }
        into "$projectDir/dist/mac_x64"
    }
    copy {
        from(buildDir) {
            include 'libs/**'
        }
        into "$projectDir/dist/windows_x86"
    }
    copy {
        from(buildDir) {
            include 'libs/**'
        }
        into "$projectDir/dist/windows_x64"
    }
    copy {
        from(projectDir) {
            include 'data/**'
            exclude 'data/autocomplete/generator.py', 'data/autocomplete/mcfunction.txt', 'data/autocomplete/mcfunction_joint.json', 'data/autocomplete/mcfunction_new.json'
        }
        into "$projectDir/dist/linux_x64"
    }
    copy {
        from(projectDir) {
            include 'data/**'
            exclude 'data/autocomplete/generator.py', 'data/autocomplete/mcfunction.txt', 'data/autocomplete/mcfunction_joint.json', 'data/autocomplete/mcfunction_new.json'
        }
        into "$projectDir/dist/mac_x64"
    }
    copy {
        from(projectDir) {
            include 'data/**'
            exclude 'data/autocomplete/generator.py', 'data/autocomplete/mcfunction.txt', 'data/autocomplete/mcfunction_joint.json', 'data/autocomplete/mcfunction_new.json'
        }
        into "$projectDir/dist/windows_x86"
    }
    copy {
        from(projectDir) {
            include 'data/**'
            exclude 'data/autocomplete/generator.py', 'data/autocomplete/mcfunction.txt', 'data/autocomplete/mcfunction_joint.json', 'data/autocomplete/mcfunction_new.json'
        }
        into "$projectDir/dist/windows_x64"
    }
    mkdir "$projectDir/dist/linux_x64/plugins"
    mkdir "$projectDir/dist/mac_x64/plugins"
    mkdir "$projectDir/dist/windows_x86/plugins"
    mkdir "$projectDir/dist/windows_x64/plugins"
    copy {
        from("$projectDir/plugins") {
            include 'cube/**'
        }
        into "$projectDir/dist/linux_x64/plugins"
    }
    copy {
        from("$projectDir/plugins") {
            include 'cube/**'
        }
        into "$projectDir/dist/mac_x64/plugins"
    }
    copy {
        from("$projectDir/plugins") {
            include 'cube/**'
        }
        into "$projectDir/dist/windows_x86/plugins"
    }
    copy {
        from("$projectDir/plugins") {
            include 'cube/**'
        }
        into "$projectDir/dist/windows_x64/plugins"
    }
    mkdir "$projectDir/dist/dist"
}